// =======================================================================================
// === SynergyLearn Platform: V2 - Corrected & Validated Enterprise Schema           ===
// =======================================================================================

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =========================================================================
// === ENUMS - Centralized Type Definitions
// =========================================================================

enum UserRole {
  STUDENT
  ALUMNI
  INSTRUCTOR
  STAFF
  FREELANCER
  ADMIN
  SYS_ADMIN
}

enum PublicationType {
  JOURNAL_ARTICLE
  CONFERENCE_PAPER
  BOOK
  BOOK_CHAPTER
  PATENT
  THESIS
  PREPRINT
  TECHNICAL_REPORT
}

enum ContentType {
  VIDEO
  RICH_TEXT
  PDF_DOCUMENT
  EXTERNAL_LINK
  QUIZ
  ASSIGNMENT
  SURVEY
  VIRTUAL_LAB
  DISCUSSION_PROMPT
}

enum ResourceType {
  LECTURE_HALL
  CLASSROOM
  COMPUTER_LAB
  WET_LAB
  SEMINAR_ROOM
  AUDITORIUM
  MEETING_ROOM
  EQUIPMENT
}

enum PayoutStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum CourseStatus { // **FIXED**: Re-added missing Enum
  DRAFT
  PENDING_APPROVAL
  PUBLISHED
  ARCHIVED
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum TransactionType { // **FIXED**: Re-added missing Enum
  COURSE_PURCHASE
  LAB_FEE
  TUITION_PAYMENT
  LIBRARY_FINE
  CREATOR_PAYOUT
  REFUND
}

enum FinancialHoldReason {
  OUTSTANDING_TUITION
  LIBRARY_FINES
  HOUSING_FEES
  DISCIPLINARY_ACTION
  EQUIPMENT_DAMAGE
}

enum NotificationChannel {
  IN_APP
  EMAIL
  SMS
  PUSH
}

enum NotificationPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

// =========================================================================
// === CORE ENTITIES: User, Identity, Security
// =========================================================================

model User {
  id               String                 @id @default(cuid())
  email            String                 @unique
  hashedPassword   String
  role             UserRole               @default(STUDENT)
  isActive         Boolean                @default(false)
  isEmailVerified  Boolean                @default(false)
  lastLoginAt      DateTime?
  createdAt        DateTime               @default(now())
  updatedAt        DateTime               @updatedAt

  // Direct Relations
  profile          Profile?
  creatorProfile   CreatorProfile?
  notificationSettings NotificationSettings?

  // 1-to-Many & Many-to-Many Relations
  sessions             Session[]
  auditLogs            AuditLog[]
  userPermissions      UserPermissionOnRole[]
  enrollments          Enrollment[]
  assignmentSubmissions AssignmentSubmission[]
  quizAttempts         QuizAttempt[]
  supportTickets       SupportTicket[]        @relation("UserTickets")
  handledTickets       SupportTicket[]        @relation("HandlerTickets")
  userLessonProgress   UserLessonProgress[]
  
  // Simple, unnamed relation to the join table. This is the correct, simplified version.
  timetableAssignments UserOnTimetableEvent[]

  @@index([email])
  @@index([role])
}

model Session { // **FIXED**: Re-added missing Session model
  id        String   @id @default(cuid())
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Permission { // **FIXED**: Re-added missing Permission model
  id           String           @id @default(cuid())
  action       String           @unique // e.g., "course:update", "user:delete"
  description  String
  
  roles        RolePermission[]
}


model Profile {
  id                   String     @id @default(cuid())
  userId               String     @unique
  user                 User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  firstName            String
  middleName           String?
  lastName             String
  dateOfBirth          DateTime?
  pronouns             String?
  avatarUrl            String?
  
  universityId         String?    @unique @map("university_id")
  departmentAffiliationId String?
  department           Department? @relation(fields: [departmentAffiliationId], references: [id])
  
  alumniDetails        Alumni?
  financialHolds       FinancialHold[]

  @@index([userId])
  @@index([universityId])
  @@index([departmentAffiliationId])
}

model CreatorProfile {
  id                  String             @id @default(cuid())
  userId              String             @unique
  user                User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  publicDisplayName     String
  publicBio           String?            @db.Text
  websiteUrl          String?
  isUniversityFaculty Boolean            @default(false)
  
  authoredCourses     Course[]
  authoredPublications UserOnPublication[]
  payoutAccount       PayoutAccount?
}

model PayoutAccount {
  id                  String         @id @default(cuid())
  creatorId           String         @unique
  creator             CreatorProfile @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  
  provider            String
  providerAccountId   String         @unique
  isVerified          Boolean        @default(false)
  
  payouts             Payout[]
}

// This is the model to find and replace.

model NotificationSettings {
  id              String   @id @default(cuid())
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // JSON blob for granular control, e.g., {"course_updates": ["EMAIL", "IN_APP"], "marketing": []}
  // It is now optional. The default empty object "{}" will be handled in the application's service layer upon user creation.
  // This is more robust than using @default("{}") which can be inconsistent.
  preferencesJson Json?
}
// =========================================================================
// === UMS - ACADEMIC & INSTITUTIONAL STRUCTURE
// =========================================================================

model Campus {
  id        String   @id @default(cuid())
  name      String   @unique
  address   String
  
  buildings Building[]
}

model Building {
  id        String   @id @default(cuid())
  name      String
  campusId  String
  campus    Campus   @relation(fields: [campusId], references: [id], onDelete: Restrict)
  
  rooms     Room[]
  
  @@unique([campusId, name])
}

model Room {
  id         String       @id @default(cuid())
  roomNumber String
  buildingId String
  building   Building     @relation(fields: [buildingId], references: [id], onDelete: Cascade)

  type       ResourceType
  capacity   Int
  hasAv      Boolean      @default(false)
  
  timetableEvents TimetableEvent[]
  bookings        Booking[]

  @@unique([buildingId, roomNumber])
}

model Department {
  id          String   @id @default(cuid())
  name        String   @unique
  code        String   @unique
  
  academicPrograms    AcademicProgram[]
  departmentalCourses Course[]            @relation("DepartmentalCourses")
  affiliatedProfiles  Profile[]
}

model AcademicProgram {
  id             String       @id @default(cuid())
  name           String       @unique
  degreeLevel    String
  totalCredits   Int
  
  departmentId   String
  department     Department   @relation(fields: [departmentId], references: [id])
  
  curriculum     Curriculum[]
}

model Curriculum {
  id               String            @id @default(cuid())
  programId        String
  program          AcademicProgram   @relation(fields: [programId], references: [id])
  courseId         String
  course           Course            @relation(fields: [courseId], references: [id])
  
  isCoreRequirement Boolean          @default(true)
  
  @@unique([programId, courseId])
}


// =========================================================================
// === LMS - COURSES, CONTENT & ENROLLMENT
// =========================================================================

model Course {
  id                   String       @id @default(cuid())
  title                String       @db.VarChar(255)
  slug                 String       @unique
  shortDescription     String?      @db.VarChar(500)
  longDescription      String?      @db.Text
  thumbnailUrl         String?
  price                Float        @default(0)
  status               CourseStatus @default(DRAFT)
  
  creatorId            String
  creator              CreatorProfile @relation(fields: [creatorId], references: [id], onDelete: Restrict)
  
  universityDepartmentId String?
  universityDepartment Department? @relation("DepartmentalCourses", fields: [universityDepartmentId], references: [id], onDelete: SetNull)
  
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt

  modules              Module[]
  enrollments          Enrollment[]
  curriculumEntries    Curriculum[]
  
  @@index([creatorId])
  @@index([status]) // **FIXED**: This now correctly indexes the scalar enum field
  @@index([universityDepartmentId])
}

model Module {
  id       String   @id @default(cuid())
  title    String
  order    Int      @default(0)
  courseId String
  course   Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  lessons  Lesson[]

  @@unique([courseId, order])
}

model Lesson {
  id              String       @id @default(cuid())
  title           String
  order           Int          @default(0)
  moduleId        String
  module          Module       @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  
  contentId       String
  contentType     ContentType
  content         ContentBlock @relation(fields: [contentId], references: [id], onDelete: Cascade)

  userProgress    UserLessonProgress[]
  
  @@unique([moduleId, order])
}

model ContentBlock {
  id          String     @id @default(cuid())
  type        ContentType
  
  videoUrl    String?
  richText    String?    @db.Text
  pdfUrl      String?
  externalUrl String?

  lessons     Lesson[]
  quiz        Quiz?
  assignment  Assignment?
  virtualLab  VirtualLab?
}

model UserLessonProgress {
  userId      String
  lessonId    String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson      Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  
  isCompleted Boolean  @default(false)
  completedAt DateTime?

  @@id([userId, lessonId])
}

model Enrollment {
  id          String    @id @default(cuid())
  userId      String
  courseId    String
  enrolledAt  DateTime  @default(now())
  finalGrade  Float?

  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  course      Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  progress    Json?     // e.g., {"lesson-1": "completed"}
  
  @@unique([userId, courseId])
}


// =========================================================================
// === ASSESSMENT & INTERACTIVE CONTENT
// =========================================================================

model Quiz {
  id              String      @id @default(cuid())
  contentBlockId  String      @unique
  contentBlock    ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  
  title           String
  timeLimitMinutes Int?
  questions       Question[]
  attempts        QuizAttempt[]
}

model Question {
  id        String       @id @default(cuid())
  text      String       @db.Text
  quizId    String
  quiz      Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)
  
  options   QuestionOption[]
}

model QuestionOption {
  id          String    @id @default(cuid())
  text        String
  isCorrect   Boolean   @default(false)
  questionId  String
  question    Question  @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model QuizAttempt {
  id          String    @id @default(cuid())
  userId      String
  quizId      String
  startedAt   DateTime  @default(now())
  completedAt DateTime?
  score       Float?
  
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz        Quiz      @relation(fields: [quizId], references: [id], onDelete: Cascade)
  
  answers     QuizAnswer[]
  
  @@index([userId, quizId])
}

model QuizAnswer {
  id         String     @id @default(cuid())
  attemptId  String
  attempt    QuizAttempt @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  questionId String
  optionId   String
  
  @@unique([attemptId, questionId])
}

model Assignment {
  id             String                 @id @default(cuid())
  contentBlockId String                 @unique
  contentBlock   ContentBlock           @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  
  title          String
  instructions   String                 @db.Text
  dueDate        DateTime?
  maxPoints      Int                    @default(100)
  
  submissions    AssignmentSubmission[]
}

model AssignmentSubmission {
  id             String    @id @default(cuid())
  assignmentId   String
  assignment     Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  studentId      String
  student        User      @relation(fields: [studentId], references: [id], onDelete: Cascade)

  submissionText String?   @db.Text
  submissionUrl  String?
  submittedAt    DateTime  @default(now())

  grade          Float?
  feedback       String?   @db.Text
  gradedById     String?
  gradedAt       DateTime?

  @@unique([assignmentId, studentId])
}

model VirtualLab {
  id              String        @id @default(cuid())
  contentBlockId  String        @unique
  contentBlock    ContentBlock  @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  
  name            String
  description     String?
  basePrice       Float         @default(0)
  templateUrl     String
}


// =========================================================================
// === UMS - TIMETABLING, SCHEDULING, BOOKINGS
// =========================================================================

model AcademicYear {
  id        Int      @id @default(autoincrement()) // Using an Int for the year itself
  semesters Semester[]
}

model Semester {
  id             String         @id @default(cuid())
  name           String         // "Fall", "Spring", "Summer"
  academicYearId Int
  academicYear   AcademicYear   @relation(fields: [academicYearId], references: [id])
  startDate      DateTime
  endDate        DateTime
  
  timetableEvents TimetableEvent[]
  
  @@unique([academicYearId, name])
}

model TimetableEvent {
  id            String    @id @default(cuid())
  courseId      String
  semesterId    String
  semester      Semester  @relation(fields: [semesterId], references: [id], onDelete: Restrict)
  roomId        String
  room          Room      @relation(fields: [roomId], references: [id], onDelete: Restrict)
  
  // Simple relation to the join table. Prisma infers the connection.
  instructors   UserOnTimetableEvent[]

  dayOfWeek     Int
  startTime     String
  endTime       String
}
model UserOnTimetableEvent {
  // --- Fields ---
  userId           String
  timetableEventId String
  roleInEvent      String       // e.g., "PRIMARY_INSTRUCTOR", "TA"
  
  // --- Relations ---
  // Simple, direct relation to User. Let Prisma handle the naming.
  user             User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Simple, direct relation to TimetableEvent. Let Prisma handle the naming.
  timetableEvent   TimetableEvent @relation(fields: [timetableEventId], references: [id], onDelete: Cascade)

  // --- Constraints ---
  @@id([userId, timetableEventId])
}

model Booking {
  id          String    @id @default(cuid())
  title       String
  bookerId    String
  roomId      String
  room        Room      @relation(fields: [roomId], references: [id])
  
  startTime   DateTime
  endTime     DateTime
  isRecurring Boolean   @default(false)
  
  @@index([roomId, startTime, endTime])
}

// =========================================================================
// === RESEARCH & PUBLICATIONS
// =========================================================================
model Publication {
  id                String          @id @default(cuid())
  title             String
  publicationType   PublicationType
  publicationDate   DateTime
  abstract          String?         @db.Text
  doi               String?         @unique
  fullTextUrl       String?
  
  authors           UserOnPublication[]
}

model UserOnPublication {
  userId        String
  creatorId     String // Correctly relating to CreatorProfile
  creator       CreatorProfile @relation(fields: [creatorId], references: [id])
  publicationId String
  publication   Publication    @relation(fields: [publicationId], references: [id])
  authorOrder   Int

  @@id([creatorId, publicationId])
}

// =========================================================================
// === FINANCIAL & AUDIT
// =========================================================================

model Transaction {
  id            String             @id @default(cuid())
  amount        Decimal            @db.Decimal(10, 2)
  currency      String             @default("INR")
  type          TransactionType
  status        TransactionStatus
  provider      String
  providerTxnId String?            @unique
  
  userId        String
  
  notes         String?

  createdAt     DateTime           @default(now())

  @@index([userId])
}

model Payout {
  id                String        @id @default(cuid())
  payoutAccountId   String
  payoutAccount     PayoutAccount @relation(fields: [payoutAccountId], references: [id])
  
  amount            Decimal       @db.Decimal(10, 2)
  status            PayoutStatus
  
  initiatedAt       DateTime      @default(now())
  completedAt       DateTime?
  
  providerTxnId     String?
  
  @@index([payoutAccountId, status])
}

model FinancialHold {
  id           String             @id @default(cuid())
  profileId    String
  profile      Profile            @relation(fields: [profileId], references: [id])
  
  reason       FinancialHoldReason
  amount       Decimal?           @db.Decimal(10, 2)
  notes        String?
  isActive     Boolean            @default(true)
  
  createdAt    DateTime           @default(now())
  resolvedAt   DateTime?
  
  @@index([profileId, isActive])
}

// =========================================================================
// === ALUMNI, CAREER SERVICES, SUPPORT
// =========================================================================

model Alumni {
  id              String    @id @default(cuid())
  profileId       String    @unique
  profile         Profile   @relation(fields: [profileId], references: [id])
  
  graduationYear  Int
  currentCompany  String?
  currentPosition String?
  linkedinUrl     String?
}

model SupportTicket {
  id            String   @id @default(cuid())
  subject       String
  description   String   @db.Text
  status        String
  priority      Int      @default(2)
  
  creatorId     String
  creator       User     @relation("UserTickets", fields: [creatorId], references: [id])
  
  handlerId     String?
  handler       User?    @relation("HandlerTickets", fields: [handlerId], references: [id])
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  comments      TicketComment[]

  @@index([status])
  @@index([handlerId])
}

model TicketComment {
  id        String   @id @default(cuid())
  ticketId  String
  ticket    SupportTicket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  authorId  String
  content   String   @db.Text
  createdAt DateTime @default(now())
}


// =========================================================================
// === RBAC - GRANULAR PERMISSIONS
// =========================================================================

model RolePermission {
  role         UserRole
  permissionId String
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  
  @@id([role, permissionId])
}

model UserPermissionOnRole {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  permissionId String
  
  contextId   String?
  contextType String?
  
  @@index([userId])
}

// =========================================================================
// === SYSTEM & AUDIT
// =========================================================================
model AuditLog {
  id         String    @id @default(cuid())
  actorId    String?   
  actor      User?     @relation(fields: [actorId], references: [id], onDelete: SetNull)
  action     String
  
  targetId   String?
  targetType String?
  
  changeData Json?
  ipAddress  String?
  timestamp  DateTime  @default(now())
  
  @@index([actorId])
  @@index([targetType, targetId])
}